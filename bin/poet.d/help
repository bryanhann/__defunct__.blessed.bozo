#!/usr/bin/env python3
import sys
import os
from pathlib import Path
from textwrap import dedent, indent

def main():
    def append(path,name): return path/f"{name}.d"
    args = ['poet'] + sys.argv[1:]
    path = Path(os.environ['POET_BIN'])
    parts = []
    while args and append(path,args[0]).is_dir():
        path=append(path,args[0])
        parts.append(args.pop(0))
    if args and (path/args[0]).is_file():
        parts.append(args.pop(0))
        prefix = ' '.join(parts)
        print( f"Command [{prefix}]: stub help.")
    else:
        usage0(path, parts,args)

def cmdDict_4path(path):
    def is_poet_executable(path):
        if '.' in path.name:
            return False
        if path.name.startswith('__'):
            return False
        return True
    def docstring4path(path):
        docpath = Path(str(path)+'.__doc__')
        if docpath.is_file():
            return docpath.read_text()
        else:
            return 'no shortdoc available\nno longdoc available\n'
    acc = dict()
    for xx in path.glob('*'):
        if is_poet_executable(xx):
            acc[ xx.name ] = docstring4path(xx).split('\n')[0]
    return acc

def usage0(path, parts, args):
    PAD='    '
    def longhelp_4path(path):
        doc = path/'__doc__'
        if doc.is_file():
            block=doc.read_text()
            block=indent(block, '    ')
        else:
            block="    None."
        print( "DOCSTRING:\n" + block)
    def usage_4cmdDict_4prefix(cmdDict,prefix):
        L = max(len(item) for item in cmdDict)
        for name,doc in cmdDict.items():
            print( f"{PAD}{name.ljust(L)}   {doc}" )
    prefix = ' '.join(parts)
    usage0=f"USAGE:\n{PAD}{prefix}"
    usage1=f"USAGE:\n{PAD}{prefix} COMMAND\nCOMMANDS:"
    cmdDict=cmdDict_4path(path)
    if cmdDict:
        print(usage1)
        usage_4cmdDict_4prefix(cmdDict,prefix)
    else:
        print( usage0 )
    longhelp_4path(path)

if __name__ == '__main__':
    main()
